package cpu.decode

import chisel3._
import chisel3.util._

class StaticInst {
	val inst = Wire(UInt(32.W))

	def opcode = inst(6, 0)
	def rd = inst(11, 7)
	def rs1 = inst(19, 15)
	def rs2 = inst(24, 20)
	def funct3 = inst(14, 12)
	def funct7 = inst(31, 25)
	def shamt = inst(24, 20)
}

case class DecodeBase(
	val rs1From: UInt = 0.U,
	val rs2From: UInt = 0.U,
	val exType: UInt = 0.U,
	val immType: UInt = 0.U,
	val aluType: UInt = 0.U,
	val lsLength: UInt = 0.U,
	val loadSignExt: Bool = false.B
) {
	def generate: List[UInt] = List(rs1From, rs2From, exType, immType, aluType, lsLength)
}

object RV32IDecode {
	def LUI 	= BitPat("b?????????????????????????0110111")
	def AUIPC 	= BitPat("b?????????????????????????0010111")
	def JAL 	= BitPat("b?????????????????????????1101111")
	def JALR 	= BitPat("b?????????????????000?????1100111")
	def BEQ 	= BitPat("b?????????????????000?????1100011")
	def BNE 	= BitPat("b?????????????????001?????1100011")
	def BLT 	= BitPat("b?????????????????100?????1100011")
	def BGE 	= BitPat("b?????????????????101?????1100011")
	def BLTU 	= BitPat("b?????????????????110?????1100011")
	def BGEU 	= BitPat("b?????????????????111?????1100011")
	def LB 		= BitPat("b?????????????????000?????0000011")
	def LH 		= BitPat("b?????????????????001?????0000011")
	def LW 		= BitPat("b?????????????????010?????0000011")
	def LBU 	= BitPat("b?????????????????100?????0000011")
	def LHU 	= BitPat("b?????????????????101?????0000011")
	def SB 		= BitPat("b?????????????????000?????0100011")
	def SH 		= BitPat("b?????????????????001?????0100011")
	def SW 		= BitPat("b?????????????????010?????0100011")
	def ADDI 	= BitPat("b?????????????????000?????0010011")
	def SLTI 	= BitPat("b?????????????????010?????0010011")
	def SLTIU 	= BitPat("b?????????????????011?????0010011")
	def XORI 	= BitPat("b?????????????????100?????0010011")
	def ORI 	= BitPat("b?????????????????110?????0010011")
	def ANDI 	= BitPat("b?????????????????111?????0010011")
	def SLLI 	= BitPat("b0000000??????????001?????0010011")
	def SRLI 	= BitPat("b0000000??????????101?????0010011")
	def SRAI 	= BitPat("b0100000??????????101?????0010011")
	def ADD 	= BitPat("b0000000??????????000?????0110011")
	def SUB 	= BitPat("b0100000??????????000?????0110011")
	def SLL 	= BitPat("b0000000??????????001?????0110011")
	def SLT 	= BitPat("b0000000??????????010?????0110011")
	def SLTU	= BitPat("b0000000??????????011?????0110011")
	def XOR 	= BitPat("b0000000??????????100?????0110011")
	def SRL 	= BitPat("b0000000??????????101?????0110011")
	def SRA 	= BitPat("b0100000??????????101?????0110011")
	def OR  	= BitPat("b0000000??????????110?????0110011")
	def AND 	= BitPat("b0000000??????????111?????0110011")
	def EBREAK 	= BitPat("b00000000000100000000000001110011")


	val table: Array[(BitPat,List[UInt])] = Array(
		LUI -> DecodeBase(SrcFrom.Imm, SrcFrom.PC, ExType.Lui, ImmType.UType, AluType.add, LSLen.word).generate,
		ADDI -> DecodeBase(SrcFrom.RS1, SrcFrom.Imm, ExType.AluI, ImmType.IType, AluType.add, LSLen.word).generate,
		ADD -> DecodeBase(SrcFrom.RS1, SrcFrom.RS2, ExType.AluR, ImmType.RType, AluType.add, LSLen.word).generate,
		LBU -> DecodeBase(SrcFrom.RS1, SrcFrom.Imm, ExType.Load, ImmType.IType, AluType.add, LSLen.byte, loadSignExt = false.B).generate,
		LW -> DecodeBase(SrcFrom.RS1, SrcFrom.Imm, ExType.Load, ImmType.IType, AluType.add, LSLen.word, loadSignExt = true.B).generate,
		SB -> DecodeBase(SrcFrom.RS1, SrcFrom.Imm, ExType.Store, ImmType.SType, AluType.add, LSLen.byte).generate,
		SW -> DecodeBase(SrcFrom.RS1, SrcFrom.Imm, ExType.Store, ImmType.SType, AluType.add, LSLen.word).generate,
		JALR -> DecodeBase(SrcFrom.RS1, SrcFrom.Imm, ExType.Jalr, ImmType.IType, AluType.add, LSLen.word).generate
	)
}

object SrcFrom {
	def RS1 = "b00".U
	def RS2 = "b01".U
	def Imm = "b10".U
	def PC = "b11".U

	def apply() = UInt(2.W)
}

object ImmType {
	def IType = "b000".U
	def SType = "b001".U
	def BType = "b010".U
	def UType = "b011".U
	def JType = "b100".U
	def RType = "b101".U

	def apply() = UInt(3.W)
}

object ExType {
	def AluR = "b0000".U
	def AluI = "b0001".U
	def Load = "b0010".U
	def Store = "b0011".U
	def Branch = "b0100".U
	def Lui = "b0101".U
	def Auipc = "b0110".U
	def Jal = "b0111".U
	def Jalr = "b1000".U
	def Ebreak = "b1001".U

	def apply() = UInt(4.W)
}

object AluType {
	def add = "b0000".U
	def sub = "b0001".U
	def and = "b0010".U
	def or = "b0011".U
	def xor = "b0100".U
	def slt = "b0101".U
	def sltu = "b0110".U
	def sll = "b0111".U
	def srl = "b1000".U
	def sra = "b1001".U

	def apply() = UInt(4.W)
}

object LSLen {
	def byte = "b?00".U
	def half = "b?01".U
	def word = "b?10".U

	def apply() = UInt(2.W)
}

class DecodedInst extends Bundle {
	val rs1From = SrcFrom() // rs1 source
	val rs2From = SrcFrom() // rs2 source
	val exType = ExType()
	val immType = ImmType()
	val aluType = Output(UInt(4.W))
	val lsLength = LSLen() // length of load/store data

	val inst = new StaticInst

	def default: List[UInt] = 
		List(SrcFrom.RS1,SrcFrom.RS2,ExType.AluR,ImmType.IType,AluType.add,LSLen.word)

	def signals = Seq(
		rs1From,
		rs2From,
		exType,
		immType,
		aluType,
		lsLength
	)

	def decode(table: Array[(BitPat, List[UInt])]) = {
		val decoded: Seq[UInt] = ListLookup(inst.inst, default, table)
		signals zip decoded foreach { case (signal, value) => signal := value}
	}
}

class DecoderIO extends Bundle {
	val instr = Input(UInt(32.W))
	val out = Output(new DecodedInst)
}

class Decoder {
	val io = IO(new DecoderIO)
	io.out.inst.inst := io.instr
	io.out.decode(RV32IDecode.table)
}